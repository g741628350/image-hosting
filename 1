# 09-工作流（简化版）

## 📝 概述

这是一个简化版的AutoCoder工作流，只用5个核心节点实现快速代码生成功能。

## 🎯 工作流基本信息

### 工作流名称
**AutoCoder 简易编程助手**

### 调用名称
**simple_autocoder**

### 工作流简介
```
简化版自主编程工作流，快速将用户需求转化为代码实现。
流程：需求分析 → 读取配置 → 代码生成 → 结果整理 → 格式化输出
适用于快速代码生成、功能实现、编程学习等场景。
```

## 🚀 工作流输入配置

### 输入参数：用户需求
```
参数名: user_requirement
参数类型: string
描述: 用户对功能或项目的需求描述，尽量详细说明要实现什么功能
是否必要: 是
```

## 🔧 工作流架构

### 整体流程
```
用户需求输入 → 需求分析 → 读取配置 → 代码生成 → 结果整理 → 格式化输出
```

### 节点分布（共5个节点）
1. **需求分析**（大模型）
2. **读取配置**（变量）
3. **代码生成**（大模型）
4. **结果整理**（参数收集器）
5. **格式化输出**（消息响应）

## 📋 详细节点配置

### 节点1：需求分析（大模型）

#### 基本配置
- **节点类型**：大模型
- **节点名称**：需求分析器

#### 配置详情
```
1. 选择模型：GPT-4 / Claude-3.5

2. 输入参数：
   参数名: user_requirement
   参数来源: 输入
   参数值: [工作流输入的用户需求]

3. 系统提示词：
   你是专业的编程需求分析师。分析用户需求：{{user_requirement}}
   
   输出：
   1. 功能描述：要实现的功能
   2. 技术建议：推荐的编程语言和技术
   3. 实现思路：简要实现步骤
   4. 代码结构：建议的代码组织方式

4. 用户提示词：
   需求：{{user_requirement}}
   请分析这个编程需求，给出技术建议和实现思路。

5. 异常处理：
   处理方式: 固定输出
   参数名: analysis_error
   参数值: 需求分析失败，请提供更详细的功能描述

6. 输出：
   输出格式: 文本
   参数名: requirement_analysis
   参数类型: string
   描述: 需求分析结果
```

### 节点2：读取用户配置（变量）

#### 基本配置
- **节点类型**：变量
- **节点名称**：用户偏好配置

#### 读取配置
```
读取变量1:
变量名: primary_language
类型: 预置

读取变量2:
变量名: code_style
类型: 预置

读取变量3:
变量名: developer_name
类型: 预置
```

### 节点3：代码生成（大模型）

#### 基本配置
- **节点类型**：大模型
- **节点名称**：代码生成器

#### 配置详情
```
1. 选择模型：专业代码生成模型

2. 输入参数：
   参数名: analysis_result
   参数来源: 引用
   参数值: [选择：requirement_analysis]
   
   参数名: preferred_language
   参数来源: 引用
   参数值: [选择：primary_language]
   
   参数名: coding_style
   参数来源: 引用
   参数值: [选择：code_style]

3. 系统提示词：
   你是专业程序员，根据需求分析生成代码。
   
   需求分析：{{analysis_result}}
   编程语言：{{preferred_language}}
   代码风格：{{coding_style}}
   
   要求：
   1. 代码结构清晰
   2. 包含注释说明
   3. 遵循最佳实践
   4. 包含错误处理
   5. 提供使用示例

4. 用户提示词：
   根据需求分析生成{{preferred_language}}代码，风格：{{coding_style}}

5. 异常处理：
   处理方式: 固定输出
   参数值: 代码生成失败，请检查需求描述

6. 输出：
   输出格式: 文本
   参数名: generated_code
   参数类型: string
   描述: 生成的完整代码
```

### 节点4：结果整理（参数收集器）

#### 基本配置
- **节点类型**：参数收集器
- **节点名称**：结果汇总
- **功能说明**：通过在流程中提问的形式，来获取到流程执行所必要的参数

#### 输入参数配置
```
参数名: analysis_result
参数来源: 引用
参数值: [选择：requirement_analysis]
参数提取: ☑️ 打钩

参数名: generated_code
参数来源: 引用
参数值: [选择：generated_code]
参数提取: ☑️ 打钩

参数名: user_language
参数来源: 引用
参数值: [选择：primary_language]
参数提取: ☑️ 打钩

参数名: user_name
参数来源: 引用
参数值: [选择：developer_name]
参数提取: ☑️ 打钩
```

#### 问答配置
```
展示给用户的问题文案:
代码已生成完成！请确认以下信息：

📋 需求分析结果：{{analysis_result}}
💻 生成的代码语言：{{user_language}}
👨‍💻 开发者：{{user_name}}

请选择你希望的输出格式：
```

#### 回复类型配置
```
回复类型: 单选回复

选项来源: 固定选项

固定选项配置:
选项1:
- 选项名称: 完整格式（包含分析+代码+说明）
- 选项值: full_format
- 选项类型: string

选项2:
- 选项名称: 仅代码格式（只输出代码）
- 选项值: code_only
- 选项类型: string

选项3:
- 选项名称: 详细格式（包含详细注释和教程）
- 选项值: detailed_format
- 选项类型: string
```

#### 输出参数
```
参数名: output_format
参数类型: string（跟随选项）
描述: 用户选择的输出格式类型

参数名: collected_data
参数类型: string
描述: 收集的所有数据汇总（包含分析结果、代码、语言、开发者信息）
```

### 节点5：格式化输出（消息响应）

#### 基本配置
- **节点类型**：消息响应
- **节点名称**：结果展示

#### 配置详情
```
输出参数配置:
参数名: format_choice
参数来源: 引用
参数值: [选择：output_format]

参数名: all_data
参数来源: 引用
参数值: [选择：collected_data]

回答内容:
# 🎉 代码生成完成！

根据您选择的输出格式：**{{format_choice}}**

{{all_data}}

## 🚀 使用说明
1. 复制代码到开发环境
2. 根据需要调整细节
3. 运行测试确保功能正常

代码生成完成！🎯

流式输出: 开
```

## � 节点连线配置

### 连线方式
在可视化界面中，需要按以下顺序连接节点：

```
[开始] → [节点1：需求分析] → [节点2：读取配置] → [节点3：代码生成] → [节点4：结果整理] → [节点5：格式化输出] → [结束]
```

### 具体连线步骤
1. **工作流开始** → **需求分析大模型**
   - 将工作流的输入参数 `user_requirement` 传递给需求分析节点

2. **需求分析大模型** → **读取配置变量**
   - 需求分析完成后，触发读取用户配置变量
   - 传递：`requirement_analysis` 输出

3. **读取配置变量** → **代码生成大模型**
   - 配置读取完成后，开始代码生成
   - 传递：`primary_language`, `code_style`, `developer_name`

4. **代码生成大模型** → **结果整理收集器**
   - 代码生成完成后，收集所有结果
   - 传递：`generated_code` 输出

5. **结果整理收集器** → **格式化输出响应**
   - 结果收集完成后，格式化输出
   - 传递：所有收集的参数

6. **格式化输出响应** → **工作流结束**
   - 输出完成，工作流结束

### 连线操作方法
1. **拖拽节点**：从左侧组件库拖拽节点到画布
2. **连接线条**：点击节点的输出端口，拖拽到下一个节点的输入端口
3. **参数传递**：连线时系统会自动识别可传递的参数
4. **顺序执行**：按连线顺序依次执行各个节点

## �🔄 执行流程

### 执行顺序
1. 用户输入需求 → 需求分析
2. 分析完成 → 读取用户配置
3. 获取配置 → 代码生成
4. 生成完成 → 结果整理
5. 整理完成 → 格式化输出

### 优势特点
- **简单快速**：5个节点，直线执行
- **个性化**：结合用户预制变量
- **易维护**：结构清晰，便于调试
- **可扩展**：后续可增加复杂功能

## 💡 使用建议

1. **输入要求**：详细描述功能需求
2. **预制变量**：提前配置编程语言、代码风格等
3. **结果验证**：生成代码需要人工review
4. **迭代优化**：根据效果调整提示词

这个简化版工作流专注于核心功能，后续可以基于此扩展更复杂的功能！

## 🏁 结束节点配置

### 节点6：工作流结束

#### 基本配置
- **节点类型**：结束节点
- **节点名称**：工作流结束
- **功能说明**：工作流的最终节点，用于返回工作流运行后的结果信息

#### 选择回答模式
```
回答模式: 返回变量，由bot生成回答

说明: 选择此模式后，bot会根据返回的变量内容，
      结合之前的对话上下文，生成最终的回答
```

#### 输出参数配置
```
参数名: final_result
参数来源: 引用
参数值: [选择：消息响应节点的完整输出]

参数名: user_format_choice
参数来源: 引用
参数值: [选择：output_format]
```

#### 备选配置（使用设定内容直接回答）
```
回答模式: 使用设定的内容直接回答

设定内容:
🎉 AutoCoder工作流执行完成！

代码已成功生成，请查看上方的详细结果。
如有任何问题或需要进一步优化，请随时告诉我！

输出参数: 无需配置（直接返回设定内容）
```

### 推荐配置
建议使用"返回变量，由bot生成回答"模式，这样可以：
- 让bot根据实际生成的内容进行总结
- 提供更个性化的回答
- 保持对话的连贯性
- 根据用户选择的输出格式给出相应的说明
