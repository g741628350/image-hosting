# AutoCoder 工作流试运行指南

## 📝 概述

本指南将帮助你完成"AutoCoder 简易编程助手"工作流的试运行，包括详细的配置步骤和填写说明。

## 🚀 试运行前准备

### 第1步：配置预制变量
在开始试运行前，需要在Bot的"预制变量"中配置以下变量：

#### 变量1：主要编程语言
```
变量名: primary_language
显示名称: 主要编程语言
变量描述: 项目使用的主要编程语言
变量类型: 单选
选项: Python, JavaScript, Java, C++, Go, Rust
默认值: Python
```

#### 变量2：代码风格
```
变量名: code_style
显示名称: 代码风格
变量描述: 代码格式化和命名规范的风格偏好
变量类型: 单选
选项: PEP8 Style, Google Style, Airbnb Style, Standard Style
默认值: PEP8 Style
```

#### 变量3：开发者姓名
```
变量名: developer_name
显示名称: 开发者姓名
变量描述: 代码作者信息，用于生成代码注释和文档署名
变量类型: 文本
默认值: 张三
```

## 🔧 工作流创建步骤

### 第1步：创建工作流
1. 进入工作流界面
2. 点击"新建工作流"
3. 填写基本信息：
   - **工作流名称**: AutoCoder 简易编程助手
   - **调用名称**: simple_autocoder
   - **简介**: 简化版自主编程工作流，快速将用户需求转化为代码实现

### 第2步：配置输入参数
在工作流开始节点配置：
```
参数名: user_requirement
参数类型: string
描述: 用户对功能或项目的需求描述，尽量详细说明要实现什么功能
是否必要: 是
```

### 第3步：添加节点并连线
按以下顺序添加节点并连线：
```
开始 → 需求分析大模型 → 读取配置变量 → 代码生成大模型 → 参数收集器 → 消息响应 → 结束
```

## 📋 详细节点配置

### 节点1：需求分析大模型

#### 基本设置
- 从"基础&预设"拖拽"大模型"到画布
- 节点名称: 需求分析器

#### 配置填写
```
1. 选择模型: [选择最强的推理模型]

2. 输入参数:
   参数名: user_requirement
   参数来源: 输入
   参数值: [留空，系统自动填充]

3. 系统提示词:
你是专业的编程需求分析师。分析用户需求：{{user_requirement}}

输出：
1. 功能描述：要实现的功能
2. 技术建议：推荐的编程语言和技术
3. 实现思路：简要实现步骤
4. 代码结构：建议的代码组织方式

4. 用户提示词:
需求：{{user_requirement}}
请分析这个编程需求，给出技术建议和实现思路。

5. 异常处理:
   处理方式: 固定输出
   参数名: analysis_error
   参数值: 需求分析失败，请提供更详细的功能描述

6. 输出:
   输出格式: 文本
   参数名: requirement_analysis
   参数类型: string
   描述: 需求分析结果
```

### 节点2：读取配置变量

#### 基本设置
- 从"基础&预设"拖拽"变量"到画布
- 节点名称: 用户偏好配置

#### 配置填写
```
读取变量1:
变量名: primary_language
类型: 预置

读取变量2:
变量名: code_style
类型: 预置

读取变量3:
变量名: developer_name
类型: 预置
```

### 节点3：代码生成大模型

#### 基本设置
- 从"基础&预设"拖拽"大模型"到画布
- 节点名称: 代码生成器

#### 配置填写
```
1. 选择模型: [选择代码生成专用模型]

2. 输入参数:
   参数名: analysis_result
   参数来源: 引用
   参数值: [从下拉列表选择: requirement_analysis]
   
   参数名: preferred_language
   参数来源: 引用
   参数值: [从下拉列表选择: primary_language]
   
   参数名: coding_style
   参数来源: 引用
   参数值: [从下拉列表选择: code_style]

3. 系统提示词:
你是专业程序员，根据需求分析生成代码。

需求分析：{{analysis_result}}
编程语言：{{preferred_language}}
代码风格：{{coding_style}}

要求：
1. 代码结构清晰
2. 包含注释说明
3. 遵循最佳实践
4. 包含错误处理
5. 提供使用示例

4. 用户提示词:
根据需求分析生成{{preferred_language}}代码，风格：{{coding_style}}

5. 异常处理:
   处理方式: 固定输出
   参数值: 代码生成失败，请检查需求描述

6. 输出:
   输出格式: 文本
   参数名: generated_code
   参数类型: string
   描述: 生成的完整代码
```

### 节点4：参数收集器

#### 基本设置
- 从"数据&处理"拖拽"参数收集器"到画布
- 节点名称: 结果汇总

#### 配置填写
```
输入参数:
参数名: analysis_result
参数来源: 引用
参数值: [从下拉列表选择: requirement_analysis]
参数提取: ☑️

参数名: generated_code
参数来源: 引用
参数值: [从下拉列表选择: generated_code]
参数提取: ☑️

参数名: user_language
参数来源: 引用
参数值: [从下拉列表选择: primary_language]
参数提取: ☑️

参数名: user_name
参数来源: 引用
参数值: [从下拉列表选择: developer_name]
参数提取: ☑️

问答文案:
代码已生成完成！请确认以下信息：

📋 需求分析结果：{{analysis_result}}
💻 生成的代码语言：{{user_language}}
👨‍💻 开发者：{{user_name}}

请选择你希望的输出格式：

回复类型: 单选回复
选项来源: 固定选项

固定选项:
选项1: 完整格式（包含分析+代码+说明） | full_format | string
选项2: 仅代码格式（只输出代码） | code_only | string
选项3: 详细格式（包含详细注释和教程） | detailed_format | string

输出参数:
参数名: output_format
参数类型: string
描述: 用户选择的输出格式类型

参数名: collected_data
参数类型: string
描述: 收集的所有数据汇总
```

### 节点5：消息响应

#### 基本设置
- 从"基础&预设"拖拽"消息响应"到画布
- 节点名称: 结果展示

#### 配置填写
```
输出参数:
参数名: format_choice
参数来源: 引用
参数值: [从下拉列表选择: output_format]

参数名: all_data
参数来源: 引用
参数值: [从下拉列表选择: collected_data]

回答内容:
# 🎉 代码生成完成！

根据您选择的输出格式：**{{format_choice}}**

{{all_data}}

## 🚀 使用说明
1. 复制代码到开发环境
2. 根据需要调整细节
3. 运行测试确保功能正常

代码生成完成！🎯

流式输出: 开
```

### 节点6：结束节点

#### 配置填写
```
回答模式: 返回变量，由bot生成回答

输出参数:
参数名: final_result
参数来源: 引用
参数值: [从下拉列表选择: 消息响应节点的完整输出]

参数名: user_format_choice
参数来源: 引用
参数值: [从下拉列表选择: output_format]
```

## 🧪 试运行测试

### 测试用例1：简单函数
```
输入: 请帮我写一个Python函数，计算两个数字的最大公约数
预期: 生成包含GCD算法的Python函数，带注释和使用示例
```

### 测试用例2：数据处理
```
输入: 创建一个JavaScript函数，验证邮箱地址格式是否正确
预期: 生成邮箱验证的正则表达式函数，包含测试用例
```

### 测试用例3：算法实现
```
输入: 实现一个Python函数，生成斐波那契数列的前n项
预期: 生成斐波那契算法，包含递归和迭代两种实现方式
```

## ✅ 验证清单

### 工作流配置检查
- [ ] 所有节点都已正确连线
- [ ] 预制变量已配置完成
- [ ] 每个节点的参数都已正确设置
- [ ] 参数引用关系正确对应

### 功能测试检查
- [ ] 工作流能够正常启动
- [ ] 需求分析节点正常工作
- [ ] 代码生成节点产出合理代码
- [ ] 参数收集器能够正常交互
- [ ] 最终输出格式正确

## 🚨 常见问题

### 问题1：参数引用失败
**现象**: 节点显示参数引用错误
**解决**: 检查前置节点是否正确配置输出参数

### 问题2：变量读取失败
**现象**: 变量节点无法读取预制变量
**解决**: 确认Bot中的预制变量名称与工作流中完全一致

### 问题3：代码生成质量差
**现象**: 生成的代码不符合要求
**解决**: 调整系统提示词，增加更具体的要求描述

## 🎯 成功标准

试运行成功的标准：
1. 工作流能够完整执行，无错误中断
2. 生成的代码符合用户需求和技术规范
3. 用户交互环节正常工作
4. 最终输出格式正确，内容完整
5. 整个流程用时合理（通常3-5分钟）

完成试运行后，你就可以正式使用这个AutoCoder工作流了！
