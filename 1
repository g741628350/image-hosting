# 05-预制变量

## 📝 概述

预制变量是Agent的个性化配置系统，通过设置不同类型的变量，让Agent能够根据项目特点和用户偏好提供定制化的编程服务。

## 🎛️ 变量类型配置

### 📝 文本类型变量

**界面配置项：**
1. **变量名称** - 变量的唯一标识符（英文，用于系统内部调用）
2. **显示名称** - 用户界面显示的中文名称
3. **变量描述** - 变量用途和作用的详细说明
4. **默认值** - 变量的初始值

**适用场景：**
- 项目名称、描述信息
- 文件路径、URL地址
- 开发者信息、版本号
- 自定义配置参数

### 🔘 单选类型变量

**界面配置项：**
1. **变量名称** - 变量的唯一标识符（英文，用于系统内部调用）
2. **显示名称** - 用户界面显示的中文名称
3. **变量描述** - 变量用途和选项含义的说明
4. **选项** - 通过"添加选项"按钮添加可选择的值
5. **默认值** - 从已添加的选项中选择一个作为默认值

**适用场景：**
- 编程语言选择（Python/Java/JavaScript等）
- 开发模式选择（开发/测试/生产）
- 代码风格选择（Google/PEP8/Airbnb等）
- 数据库类型选择（MySQL/PostgreSQL/MongoDB等）

### ☑️ 多选类型变量

**界面配置项：**
1. **变量名称** - 变量的唯一标识符（英文，用于系统内部调用）
2. **显示名称** - 用户界面显示的中文名称
3. **变量描述** - 变量用途和选项含义的说明
4. **选项** - 通过"添加选项"按钮添加可选择的值
5. **默认值** - 从已添加的选项中选择多个作为默认值

**适用场景：**
- 支持的编程语言（可选多种）
- 使用的开发工具（Git/Docker/ESLint等）
- 部署平台（AWS/Azure/本地服务器等）
- 项目功能模块（用户管理/支付/通知等）

## 📋 实际配置示例

### 📝 文本类型变量配置示例

#### 示例1：项目名称
```
1. 变量名称：project_name
2. 显示名称：项目名称
3. 变量描述：当前开发项目的名称，用于生成相关代码和文档
4. 默认值：MyProject
```

#### 示例2：开发者信息
```
1. 变量名称：developer_name
2. 显示名称：开发者姓名
3. 变量描述：代码作者信息，用于生成代码注释和文档署名
4. 默认值：张三
```

#### 示例3：API基础URL
```
1. 变量名称：api_base_url
2. 显示名称：API基础地址
3. 变量描述：项目API服务的基础URL地址
4. 默认值：https://api.example.com
```

### 🔘 单选类型变量配置示例

#### 示例1：主要编程语言
```
1. 变量名称：primary_language
2. 显示名称：主要编程语言
3. 变量描述：项目使用的主要编程语言，影响代码生成和技术选型
4. 选项：（点击"添加选项"按钮添加以下选项）
   - Python
   - JavaScript
   - Java
   - C++
   - Go
   - Rust
5. 默认值：Python
```

#### 示例2：开发环境
```
1. 变量名称：environment
2. 显示名称：开发环境
3. 变量描述：当前的开发环境类型，影响配置和部署策略
4. 选项：（点击"添加选项"按钮添加以下选项）
   - 开发环境
   - 测试环境
   - 预生产环境
   - 生产环境
5. 默认值：开发环境
```

#### 示例3：数据库类型
```
1. 变量名称：database_type
2. 显示名称：数据库类型
3. 变量描述：项目使用的数据库类型，影响数据模型和查询语句生成
4. 选项：（点击"添加选项"按钮添加以下选项）
   - MySQL
   - PostgreSQL
   - MongoDB
   - SQLite
   - Redis
5. 默认值：MySQL
```

### ☑️ 多选类型变量配置示例

#### 示例1：支持的框架
```
1. 变量名称：supported_frameworks
2. 显示名称：支持的框架
3. 变量描述：项目中使用或需要支持的开发框架
4. 选项：（点击"添加选项"按钮添加以下选项）
   - React
   - Vue.js
   - Angular
   - Express.js
   - FastAPI
   - Django
   - Spring Boot
   - Laravel
5. 默认值：React, Express.js
```

#### 示例2：开发工具
```
1. 变量名称：development_tools
2. 显示名称：开发工具
3. 变量描述：项目开发过程中使用的工具和服务
4. 选项：（点击"添加选项"按钮添加以下选项）
   - Git
   - Docker
   - Jest
   - ESLint
   - Prettier
   - Webpack
   - Babel
   - TypeScript
5. 默认值：Git, ESLint, Prettier
```

#### 示例3：部署平台
```
1. 变量名称：deployment_platforms
2. 显示名称：部署平台
3. 变量描述：项目可能部署的目标平台
4. 选项：（点击"添加选项"按钮添加以下选项）
   - AWS
   - Azure
   - Google Cloud
   - Heroku
   - Vercel
   - Netlify
   - 本地服务器
5. 默认值：Vercel
```

## 🎯 变量使用场景

### 项目初始化场景
通过预制变量，Agent可以：
- 根据项目名称生成合适的文件夹结构
- 根据编程语言选择合适的模板和工具
- 根据开发模式调整代码复杂度和注释详细程度
- 根据代码风格生成符合规范的代码

### 代码生成场景
预制变量影响：
- 函数和类的命名规范
- 注释的详细程度和风格
- 错误处理的方式
- 测试代码的生成策略

### 文档生成场景
预制变量用于：
- 自动填充项目信息
- 生成符合团队规范的文档格式
- 包含正确的作者和版本信息
- 适配不同的部署环境说明

## ⚙️ 配置建议

### 变量命名规范
- 使用英文小写字母和下划线
- 名称要具有描述性和唯一性
- 避免使用系统保留字
- 建议使用统一的命名前缀

### 选项设置技巧
- 选项名称要简洁明了
- 避免选项过多导致选择困难
- 为常用选项设置合理的默认值
- 选项顺序按使用频率排列

### 描述编写要点
- 清楚说明变量的用途和影响
- 提供具体的使用示例
- 说明变量与其他配置的关联关系
- 注明特殊情况和注意事项

## 💡 使用技巧

1. **分类管理**：将相关变量按功能分组管理
2. **版本控制**：重要变量配置要做好备份
3. **测试验证**：新增变量后要测试Agent行为变化
4. **文档同步**：及时更新变量说明文档
5. **团队共享**：团队项目使用统一的变量配置
