# 09-工作流

## 📝 概述

工作流支持通过可视化的方式，对插件、大语言模型、代码块等功能进行组合，从而实现复杂、稳定的业务流程编排。本文档介绍如何创建"AutoCoder 自主编程流水线"工作流。

## 🎯 工作流基本信息

### 工作流名称
**AutoCoder 自主编程流水线**

### 调用名称
**auto_programming_pipeline**

### 工作流简介
```
这是一个端到端的自主编程工作流，能够自动将用户需求转化为完整的代码实现。

工作流通过智能需求分析、自动技术选型、代码生成、测试验证、优化部署等环节，
实现从想法到产品的全自动化开发过程。

适用于快速原型开发、功能模块实现、完整项目搭建等各种编程场景。
```

## � 工作流输入配置

### 输入参数1：项目需求描述
```
参数名: user_requirement
参数类型: string
描述: 用户对项目的详细需求描述，包括功能要求、技术偏好、使用场景等
是否必要: 是
```

### 输入参数2：项目优先级
```
参数名: project_priority
参数类型: string
描述: 项目开发的优先级设置（高/中/低），影响代码质量和开发策略
是否必要: 否
```

### 输入参数3：技术栈偏好
```
参数名: tech_preference
参数类型: object
描述: 用户的技术栈偏好设置，包含编程语言、框架、数据库等选择
是否必要: 否
```

### 输入参数4：项目规模
```
参数名: project_scale
参数类型: string
描述: 预期的项目规模（小型/中型/大型），用于调整架构复杂度
是否必要: 否
```

### 输入参数5：部署环境
```
参数名: deployment_env
参数类型: string
描述: 目标部署环境（云服务/本地/混合），影响架构设计和技术选型
是否必要: 否
```

### 输入参数6：参考文档
```
参数名: reference_docs
参数类型: file(markdown)
描述: 可选的参考文档，如需求文档、API规范等，用于辅助需求理解
是否必要: 否
```

### 输入参数7：代码质量要求
```
参数名: quality_level
参数类型: integer
描述: 代码质量要求等级（1-10），数值越高要求越严格
是否必要: 否
```

### 输入参数8：是否包含测试
```
参数名: include_tests
参数类型: boolean
描述: 是否自动生成测试用例和测试代码
是否必要: 否
```

### 输入参数9：输出格式偏好
```
参数名: output_format
参数类型: array(string)
描述: 期望的输出格式，可选：源代码、文档、部署脚本、测试报告等
是否必要: 否
```

### 输入参数10：时间限制
```
参数名: time_limit
参数类型: number
描述: 项目开发的时间限制（小时），用于调整开发策略和代码复杂度
是否必要: 否
```

## �🔧 工作流架构设计

### 整体流程
```
用户需求输入 → 需求分析 → 技术选型 → 架构设计 → 代码生成 → 质量检查 → 测试验证 → 结果输出
```

### 节点分布
- **基础&预设**：3个节点（大模型×2、变量×1）
- **技能&知识**：1个节点（插件×1）
- **代码&逻辑**：3个节点（代码×1、选择器×1、分支合并器×1）
- **数据&处理**：3个节点（参数提取器×1、参数收集器×1、数据转换器×1）

## 📋 详细节点配置

### 节点1：需求分析大模型

#### 基本配置
- **节点类型**：大模型
- **节点名称**：需求分析器
- **位置**：流程起始

#### 1. 选择模型
```
推荐模型：GPT-4 / Claude-3.5 / 平台最强推理模型
```

#### 2. 输入参数
```
参数名: user_requirement
参数来源: 输入
参数值: [用户在此输入项目需求描述]
```

#### 3. 系统提示词
```
你是一个专业的需求分析师，负责分析用户的编程需求。

请分析以下需求：{{user_requirement}}

输出格式要求：
- 项目类型：[web应用/移动应用/桌面应用/API服务/其他]
- 核心功能：[列出3-5个主要功能点]
- 技术难点：[识别潜在的技术挑战]
- 预估复杂度：[简单/中等/复杂]
- 推荐技术栈：[基于需求推荐合适的技术]
- 项目规模：[小型/中型/大型]

请用结构化的JSON格式输出分析结果。
```

#### 4. 用户提示词
```
需求描述：{{user_requirement}}

请帮我详细分析这个项目需求，并给出专业的技术建议。
```

#### 5. 异常处理
```
处理方式: 固定输出
参数名: analysis_failed
参数值: {"error": "需求分析失败，请提供更详细的项目描述"}
```

#### 6. 输出
```
输出格式: JSON
参数名: requirement_analysis
参数类型: string
描述: 结构化的需求分析结果，包含项目类型、功能点、技术建议等
```

### 节点2：参数提取器

#### 基本配置
- **节点类型**：参数提取器
- **节点名称**：需求参数提取
- **输入来源**：{{requirement_analysis}}

#### 提取规则
```
提取参数1:
- 参数名: project_type
- 提取路径: $.project_type
- 数据类型: string

提取参数2:
- 参数名: tech_stack
- 提取路径: $.tech_stack
- 数据类型: string

提取参数3:
- 参数名: complexity
- 提取路径: $.complexity
- 数据类型: string

提取参数4:
- 参数名: core_features
- 提取路径: $.core_features
- 数据类型: array
```

### 节点3：技术配置变量

#### 基本配置
- **节点类型**：变量
- **节点名称**：技术栈配置
- **功能说明**：读取预制变量，并可将变量给其他节点进行调用

#### 读取配置
```
读取变量1:
变量名: primary_language
类型: 预置
说明: 读取Bot中配置的主要编程语言变量

读取变量2:
变量名: code_style
类型: 预置
说明: 读取Bot中配置的代码风格偏好变量

读取变量3:
变量名: development_mode
类型: 预置
说明: 读取Bot中配置的开发模式变量

读取变量4:
变量名: project_name
类型: 预置
说明: 读取Bot中配置的项目名称变量

读取变量5:
变量名: developer_name
类型: 预置
说明: 读取Bot中配置的开发者姓名变量
```

#### 输出变量
```
输出变量1: {{primary_language}} - 可被其他节点引用
输出变量2: {{code_style}} - 可被其他节点引用
输出变量3: {{development_mode}} - 可被其他节点引用
输出变量4: {{project_name}} - 可被其他节点引用
输出变量5: {{developer_name}} - 可被其他节点引用
```

### 节点4：分类选择器

#### 基本配置
- **节点类型**：分类选择器
- **节点名称**：项目类型路由
- **判断依据**：{{project_type}}

#### 分类规则
```
分类1: web应用
- 条件: project_type == "web应用"
- 输出路径: web_development_branch

分类2: 移动应用
- 条件: project_type == "移动应用"  
- 输出路径: mobile_development_branch

分类3: API服务
- 条件: project_type == "API服务"
- 输出路径: api_development_branch

分类4: 其他
- 条件: 默认分类
- 输出路径: general_development_branch
```

### 节点5：架构设计大模型

#### 基本配置
- **节点类型**：大模型
- **节点名称**：架构设计师
- **输入来源**：分类选择器输出

#### 1. 选择模型
```
推荐模型：专业的架构设计模型
```

#### 2. 输入参数
```
参数名: project_type
参数来源: 引用
参数值: {{project_type}}

参数名: tech_stack
参数来源: 引用
参数值: {{selected_framework}}

参数名: features
参数来源: 引用
参数值: {{core_features}}

参数名: complexity
参数来源: 引用
参数值: {{complexity}}
```

#### 3. 系统提示词
```
你是一个资深的软件架构师，负责设计项目的技术架构。

项目信息：
- 类型：{{project_type}}
- 技术栈：{{tech_stack}}
- 核心功能：{{features}}
- 复杂度：{{complexity}}

请设计详细的项目架构，包括：
1. 项目目录结构
2. 核心模块划分
3. 数据流设计
4. API接口设计
5. 数据库设计（如需要）
6. 部署架构

输出格式为结构化的JSON。
```

#### 4. 用户提示词
```
请为以下项目设计完整的技术架构：
- 项目类型：{{project_type}}
- 技术栈：{{tech_stack}}
- 功能需求：{{features}}

要求架构清晰、可扩展、易维护。
```

#### 5. 异常处理
```
处理方式: 切换模型
选择模型: 备用架构设计模型
```

#### 6. 输出
```
输出格式: JSON
参数名: architecture_design
参数类型: string
描述: 完整的项目架构设计，包含目录结构、模块划分、接口设计等
```

### 节点6：代码生成器

#### 基本配置
- **节点类型**：代码
- **节点名称**：核心代码生成

#### 代码配置
```
编程语言: 根据{{tech_stack}}动态选择
代码模板: 
```python
# 基于架构设计生成代码
architecture = {{architecture_design}}
tech_stack = {{selected_framework}}
features = {{core_features}}

# 调用代码生成逻辑
generated_code = generate_project_code(
    architecture=architecture,
    tech_stack=tech_stack,
    features=features
)

return generated_code
```
```

### 节点7：质量检查选择器

#### 基本配置
- **节点类型**：选择器
- **节点名称**：代码质量判断
- **判断条件**：代码质量评分

#### 选择逻辑
```
条件1: 质量评分 >= 85
- 输出: 通过质量检查 → 继续测试验证

条件2: 质量评分 < 85
- 输出: 质量不达标 → 返回代码优化
```

### 节点8：测试验证插件

#### 基本配置
- **节点类型**：插件
- **节点名称**：自动化测试
- **插件选择**：代码测试插件

#### 插件配置
```
输入参数:
- 代码内容: {{generated_code}}
- 测试类型: 单元测试 + 集成测试
- 覆盖率要求: 80%

输出参数:
- 测试结果: test_results
- 覆盖率: coverage_rate
- 错误报告: error_report
```

### 节点9：结果收集器

#### 基本配置
- **节点类型**：参数收集器
- **节点名称**：最终结果汇总

#### 收集参数
```
收集参数1:
- 参数名: final_code
- 来源: {{generated_code}}

收集参数2:
- 参数名: architecture
- 来源: {{architecture_design}}

收集参数3:
- 参数名: test_report
- 来源: {{test_results}}

收集参数4:
- 参数名: project_info
- 来源: {{requirement_analysis}}
```

### 节点10：输出格式化

#### 基本配置
- **节点类型**：消息响应
- **节点名称**：结果输出
- **功能说明**：支持运行过程中的消息输出，支持编辑回答内容

#### 输出参数配置
```
参数名: final_code
参数来源: 引用
参数值: [从下拉列表选择：generated_code]

参数名: architecture
参数来源: 引用
参数值: [从下拉列表选择：architecture_design]

参数名: test_report
参数来源: 引用
参数值: [从下拉列表选择：test_results]

参数名: project_info
参数来源: 引用
参数值: [从下拉列表选择：requirement_analysis]

参数名: project_name
参数来源: 引用
参数值: [从下拉列表选择：project_name]

参数名: developer_name
参数来源: 引用
参数值: [从下拉列表选择：developer_name]
```

#### 回答内容
```
# 🎉 {{project_name}} 项目开发完成！

## �‍💻 开发信息
**开发者**: {{developer_name}}
**完成时间**: {{当前时间}}

## �📋 项目分析
{{project_info}}

## 🏗️ 架构设计
{{architecture}}

## 💻 生成代码
{{final_code}}

## 🧪 测试报告
{{test_report}}

## 🚀 部署建议
根据项目特点和技术栈，建议采用以下部署方式：
- 开发环境：本地开发服务器
- 测试环境：Docker容器化部署
- 生产环境：云服务平台部署

## ✅ 下一步操作
1. 下载生成的代码文件
2. 在本地环境中测试运行
3. 根据需要进行个性化调整
4. 部署到目标环境

项目开发完成，如有问题请随时咨询！
```

#### 流式输出
```
设置: 开
说明: 启用流式输出，让用户能够实时看到代码生成过程
```

## 🔄 工作流执行逻辑

### 执行顺序
1. 用户输入需求 → 需求分析大模型
2. 需求分析结果 → 参数提取器
3. 提取的参数 → 技术配置变量
4. 项目类型 → 分类选择器
5. 分类结果 → 架构设计大模型
6. 架构设计 → 代码生成器
7. 生成代码 → 质量检查选择器
8. 质量检查通过 → 测试验证插件
9. 测试完成 → 结果收集器
10. 收集完成 → 输出格式化

### 异常处理流程
- 任何节点失败 → 记录错误信息
- 质量检查不通过 → 返回代码优化环节
- 测试失败 → 提供错误修复建议

## 💡 使用建议

1. **输入要求**：提供详细、清晰的项目需求描述
2. **模型选择**：根据项目复杂度选择合适的模型
3. **参数调优**：根据实际效果调整各节点参数
4. **流程监控**：关注各环节的执行状态和输出质量
5. **结果验证**：对生成的代码进行人工review和测试
